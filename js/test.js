// Generated by CoffeeScript 1.8.0
(function() {
  var PAPER, STAGE, ScalableImage, shifted,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  STAGE = null;

  PAPER = null;

  shifted = false;

  $(function() {
    var IMAGES;
    STAGE = new Kinetic.Stage({
      container: 'canvas',
      width: window.innerWidth,
      height: window.innerHeight
    });
    PAPER = new Kinetic.Layer();
    PAPER.add(new Kinetic.Text({
      x: 15,
      y: 15,
      text: 'Drop images here.',
      fontSize: 20,
      fontFamily: 'sans-serif',
      fill: 'gray'
    }));
    STAGE.add(PAPER);
    IMAGES = [];
    $('body').on('drop', function(e) {
      var f, files, reader;
      e.stopPropagation();
      e.preventDefault();
      files = e.originalEvent.dataTransfer.files;
      if (files.length > 1) {
        alert('Only one file at a time, please!');
        return;
      }
      f = files[0];
      if (f.type.indexOf('image') !== 0) {
        alert('File is not an image!');
        return;
      }
      console.log('File added: ' + f.name);
      reader = new FileReader();
      reader.onload = (function(_this) {
        return function(e) {
          var img;
          img = new Image();
          img.onload = function() {
            return IMAGES.push(new ScalableImage(img));
          };
          return img.src = e.target.result;
        };
      })(this);
      return reader.readAsDataURL(f);
    }).on('dragover', function(e) {
      e.stopPropagation();
      e.preventDefault();
      return e.originalEvent.dataTransfer.dropEffect = 'copy';
    });
    return $(document).on('keyup keydown', function(e) {
      return shifted = e.shiftKey;
    });
  });

  ScalableImage = (function() {
    function ScalableImage(img) {
      this.removeEditControls = __bind(this.removeEditControls, this);
      this.addEditControls = __bind(this.addEditControls, this);
      this.getTopLeftPoint = __bind(this.getTopLeftPoint, this);
      this.setControlsPosition = __bind(this.setControlsPosition, this);
      this.onClick = __bind(this.onClick, this);
      this.img = new Kinetic.Image({
        x: 0,
        y: 0,
        image: img,
        width: img.width,
        height: img.height,
        offset: {
          x: img.width / 2,
          y: img.height / 2
        },
        stroke: 'gray',
        strokeWidth: 2,
        strokeEnabled: false,
        dash: [10, 10]
      });
      PAPER.add(this.img);
      PAPER.draw();
      this.ratio = img.width / img.height;
      this.isEditing = false;
      this.img.on('click', this.onClick);
    }

    ScalableImage.prototype.onClick = function() {
      console.log('click');
      console.log(this.img.offsetX());
      if (!this.isEditing) {
        this.img.draggable(true);
        this.img.strokeEnabled(true);
        this.isEditing = true;
        this.addEditControls();
        STAGE.add(this.editLayer);
        return this.img.draw();
      } else {
        return this.removeEditControls();
      }
    };

    ScalableImage.prototype.setControlsPosition = function() {
      var degr, halfDiag;
      halfDiag = Math.sqrt(this.img.width() * this.img.width() + this.img.height() * this.img.height()) / 2;
      degr = Math.atan(this.img.height() / this.img.width()) * 180 / Math.PI;
      this.rotate.x(this.img.x() - halfDiag * Math.cos((this.img.rotation() + degr) * Math.PI / 180));
      this.rotate.y(this.img.y() - halfDiag * Math.sin((this.img.rotation() + degr) * Math.PI / 180));
      this.resize.x(this.img.x() + halfDiag * Math.cos((this.img.rotation() + degr) * Math.PI / 180));
      return this.resize.y(this.img.y() + halfDiag * Math.sin((this.img.rotation() + degr) * Math.PI / 180));
    };

    ScalableImage.prototype.getTopLeftPoint = function() {
      var degr, halfDiag, p;
      halfDiag = Math.sqrt(this.img.width() * this.img.width() + this.img.height() * this.img.height()) / 2;
      degr = Math.atan(this.img.height() / this.img.width()) * 180 / Math.PI;
      p = {
        x: this.img.x() - halfDiag * Math.cos((this.img.rotation() + degr) * Math.PI / 180),
        y: this.img.y() - halfDiag * Math.sin((this.img.rotation() + degr) * Math.PI / 180)
      };
      return p;
    };

    ScalableImage.prototype.addEditControls = function() {
      this.editLayer = new Kinetic.Layer();
      this.rotate = new Kinetic.Circle({
        radius: 10,
        fill: 'gray',
        draggable: true
      });
      this.resize = new Kinetic.Circle({
        radius: 10,
        fill: 'gray',
        draggable: true
      });
      this.setControlsPosition();
      this.rotate.on('dragmove', (function(_this) {
        return function() {
          var degr, newRotation, oldRotation;
          console.log('rotate');
          degr = Math.atan2(_this.img.width(), _this.img.height()) * 180 / Math.PI;
          if (shifted) {
            oldRotation = _this.img.rotation();
            newRotation = -Math.atan2(_this.img.x() - _this.rotate.x(), _this.img.y() - _this.rotate.y()) * 180 / Math.PI + degr;
            _this.img.rotate((newRotation - oldRotation) * 0.01);
          } else {
            _this.img.rotation(-Math.atan2(_this.img.x() - _this.rotate.x(), _this.img.y() - _this.rotate.y()) * 180 / Math.PI + degr);
          }
          _this.setControlsPosition();
          return STAGE.draw();
        };
      })(this));
      this.rotate.on('dragend', this.removeEditControls);
      this.resize.on('dragmove', (function(_this) {
        return function() {
          var distX, distY, p;
          console.log('resize');
          p = _this.getTopLeftPoint();
          distX = _this.resize.x() - p.x;
          distY = _this.resize.y() - p.y;
          if (distX <= 20 || distY <= 20) {
            _this.setControlsPosition();
            return;
          }
          _this.img.width(_this.ratio * distY);
          _this.img.height(_this.img.width() / _this.ratio);
          _this.img.offsetX(_this.img.width() / 2);
          _this.img.offsetY(_this.img.height() / 2);
          _this.setControlsPosition();
          return STAGE.draw();
        };
      })(this));
      this.resize.on('dragend', this.removeEditControls);
      this.editLayer.add(this.rotate);
      this.editLayer.add(this.resize);
      return this.img.on('dragmove', (function(_this) {
        return function() {
          _this.setControlsPosition();
          return _this.editLayer.draw();
        };
      })(this));
    };

    ScalableImage.prototype.removeEditControls = function() {
      this.editLayer.remove();
      this.img.strokeEnabled(false);
      this.img.draggable(false);
      this.isEditing = false;
      STAGE.draw();
      return this.img.off('dragmove', this.setControlsPosition);
    };

    return ScalableImage;

  })();

}).call(this);

// Generated by CoffeeScript 1.8.0
(function() {
  var IMAGES, PAPER, STAGE, ScalableImage, deselectAll, shifted,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  STAGE = null;

  PAPER = null;

  IMAGES = [];

  shifted = false;

  deselectAll = function() {
    var image, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = IMAGES.length; _i < _len; _i++) {
      image = IMAGES[_i];
      if (image.isEditing) {
        _results.push(image.removeEditControls());
      }
    }
    return _results;
  };

  $(function() {
    var bgLayer;
    STAGE = new Kinetic.Stage({
      container: 'canvas',
      width: $('body').width(),
      height: $('body').height()
    });
    bgLayer = new Kinetic.Layer();
    bgLayer.add(new Kinetic.Text({
      x: 15,
      y: 15,
      text: 'Drop your documents here.',
      fontSize: 20,
      fontFamily: 'sans-serif',
      fill: 'gray'
    }));
    bgLayer.on('click', deselectAll);
    STAGE.add(bgLayer);
    PAPER = new Kinetic.Layer();
    STAGE.add(PAPER);
    $('body').on('drop', function(e) {
      var f, files, reader;
      e.stopPropagation();
      e.preventDefault();
      files = e.originalEvent.dataTransfer.files;
      if (files.length > 1) {
        alert('Only one file at a time, please!');
        return;
      }
      f = files[0];
      console.log('File added: %s (%s)', f.name, f.type);
      if (f.type.indexOf('image') === 0) {
        reader = new FileReader();
        reader.onload = (function(_this) {
          return function(e) {
            var img;
            img = new Image();
            img.onload = function() {
              return IMAGES.push(new ScalableImage(img));
            };
            return img.src = e.target.result;
          };
        })(this);
        return reader.readAsDataURL(f);
      } else if (f.type === 'application/pdf') {
        reader = new FileReader();
        reader.onload = (function(_this) {
          return function(e) {
            var canvas, ctx;
            canvas = document.createElement('canvas');
            ctx = canvas.getContext('2d');
            return PDFJS.getDocument(e.target.result).then(function(pdf) {
              var p;
              p = prompt('PDF has ' + pdf.numPages + ' pages, which do you want?', 1);
              console.log('Page ' + p);
              return pdf.getPage(parseInt(p)).then(function(page) {
                var viewport;
                viewport = page.getViewport(2.0);
                canvas.width = viewport.width;
                canvas.height = viewport.height;
                return page.render({
                  canvasContext: ctx,
                  viewport: viewport
                }).then(function() {
                  var data, img;
                  data = canvas.toDataURL();
                  img = new Image();
                  img.onload = function() {
                    IMAGES.push(new ScalableImage(img));
                    return console.log('Done, %dx%d', canvas.width, canvas.height);
                  };
                  return img.src = data;
                });
              });
            });
          };
        })(this);
        return reader.readAsArrayBuffer(f);
      } else {
        alert('Unsupported file type');
      }
    }).on('dragover', function(e) {
      e.stopPropagation();
      e.preventDefault();
      return e.originalEvent.dataTransfer.dropEffect = 'copy';
    });
    return $(document).on('keyup keydown', function(e) {
      return shifted = e.shiftKey;
    });
  });

  ScalableImage = (function() {
    function ScalableImage(img) {
      this.removeEditControls = __bind(this.removeEditControls, this);
      this.addEditControls = __bind(this.addEditControls, this);
      this.getTopLeftPoint = __bind(this.getTopLeftPoint, this);
      this.setControlsPosition = __bind(this.setControlsPosition, this);
      this.startEdit = __bind(this.startEdit, this);
      this.img = new Kinetic.Image({
        x: img.width / 2 + 20,
        y: img.height / 2 + 20,
        image: img,
        width: img.width,
        height: img.height,
        offset: {
          x: img.width / 2,
          y: img.height / 2
        },
        dash: [10, 10],
        shadowColor: 'black',
        shadowBlur: 5,
        shadowOpacity: 0.5
      });
      PAPER.add(this.img);
      PAPER.draw();
      this.resize = null;
      this.rotate = null;
      this.isEditing = false;
      this.img.on('mousedown', (function(_this) {
        return function() {
          return _this.img.draggable(true);
        };
      })(this));
      this.img.on('click', (function(_this) {
        return function() {
          if (_this.isEditing) {
            return _this.removeEditControls();
          } else {
            return _this.startEdit();
          }
        };
      })(this));
      this.img.on('dragmove', (function(_this) {
        return function() {
          if (_this.isEditing) {
            _this.setControlsPosition();
            _this.resize.draw();
            return _this.rotate.draw();
          } else {
            return _this.startEdit();
          }
        };
      })(this));
    }

    ScalableImage.prototype.startEdit = function() {
      deselectAll();
      this.img.draggable(true);
      this.img.shadowBlur(15);
      this.isEditing = true;
      this.addEditControls();
      this.img.draw();
      this.resize.draw();
      return this.rotate.draw();
    };

    ScalableImage.prototype.setControlsPosition = function() {
      var degr, halfDiag;
      halfDiag = Math.sqrt(this.img.width() * this.img.width() + this.img.height() * this.img.height()) / 2;
      degr = Math.atan(this.img.height() / this.img.width()) * 180 / Math.PI;
      this.rotate.x(this.img.x() - halfDiag * Math.cos((this.img.rotation() + degr) * Math.PI / 180));
      this.rotate.y(this.img.y() - halfDiag * Math.sin((this.img.rotation() + degr) * Math.PI / 180));
      this.resize.x(this.img.x() + halfDiag * Math.cos((this.img.rotation() + degr) * Math.PI / 180));
      return this.resize.y(this.img.y() + halfDiag * Math.sin((this.img.rotation() + degr) * Math.PI / 180));
    };

    ScalableImage.prototype.getTopLeftPoint = function() {
      var degr, halfDiag, p;
      halfDiag = Math.sqrt(this.img.width() * this.img.width() + this.img.height() * this.img.height());
      degr = Math.atan(this.img.height() / this.img.width());
      p = {
        x: this.img.x() - halfDiag * Math.cos(this.img.rotation() * Math.PI / 180 + degr) / 2,
        y: this.img.y() - halfDiag * Math.sin(this.img.rotation() * Math.PI / 180 + degr) / 2
      };
      return p;
    };

    ScalableImage.prototype.addEditControls = function() {
      var resizeImg, rotateImg;
      this.rotate = new Kinetic.Group({
        width: 20,
        height: 20,
        draggable: true
      });
      this.rotate.add(new Kinetic.Circle({
        radius: 12,
        fill: 'white',
        shadowColor: 'black',
        shadowBlur: 5,
        shadowOpacity: 0.5
      }));
      rotateImg = new Image();
      rotateImg.onload = (function(_this) {
        return function() {
          _this.rotate.add(new Kinetic.Image({
            image: rotateImg,
            width: 20,
            height: 20,
            offset: {
              x: 10,
              y: 10
            }
          }));
          return _this.rotate.draw();
        };
      })(this);
      rotateImg.src = 'res/rotate.svg';
      this.resize = new Kinetic.Group({
        width: 20,
        height: 20,
        draggable: true
      });
      this.resize.add(new Kinetic.Circle({
        radius: 12,
        fill: 'white',
        shadowColor: 'black',
        shadowBlur: 5,
        shadowOpacity: 0.5
      }));
      resizeImg = new Image();
      resizeImg.onload = (function(_this) {
        return function() {
          _this.resize.add(new Kinetic.Image({
            image: resizeImg,
            width: 20,
            height: 20,
            offset: {
              x: 10,
              y: 10
            }
          }));
          return _this.resize.draw();
        };
      })(this);
      resizeImg.src = 'res/scale.svg';
      this.setControlsPosition();
      this.rotate.on('dragmove', (function(_this) {
        return function() {
          var degr, newRotation, oldRotation;
          console.log('rotate');
          degr = Math.atan2(_this.img.width(), _this.img.height()) * 180 / Math.PI;
          if (shifted) {
            oldRotation = _this.img.rotation();
            newRotation = -Math.atan2(_this.img.x() - _this.rotate.x(), _this.img.y() - _this.rotate.y()) * 180 / Math.PI + degr;
            _this.img.rotate((newRotation - oldRotation) * 0.01);
          } else {
            _this.img.rotation(-Math.atan2(_this.img.x() - _this.rotate.x(), _this.img.y() - _this.rotate.y()) * 180 / Math.PI + degr);
          }
          _this.setControlsPosition();
          return STAGE.draw();
        };
      })(this));
      this.resize.on('dragmove', (function(_this) {
        return function() {
          var height, pr, rad, width;
          if (_this.resize.x() - _this.img.x() <= 10 && _this.resize.y() - _this.img.y() <= 10) {
            _this.setControlsPosition();
            return;
          }
          rad = Math.atan(_this.img.height() / _this.img.width());
          pr = Math.sqrt(Math.pow(_this.resize.x() - _this.img.x(), 2) + Math.pow(_this.resize.y() - _this.img.y(), 2));
          width = 2 * pr * Math.cos(rad);
          height = 2 * pr * Math.sin(rad);
          _this.img.width(width);
          _this.img.height(height);
          _this.img.offsetX(_this.img.width() / 2);
          _this.img.offsetY(_this.img.height() / 2);
          _this.setControlsPosition();
          _this.rotate.draw();
          return _this.resize.draw();
        };
      })(this));
      PAPER.add(this.rotate);
      return PAPER.add(this.resize);
    };

    ScalableImage.prototype.removeEditControls = function() {
      this.rotate.remove();
      this.resize.remove();
      this.img.shadowBlur(5);
      this.img.draggable(false);
      this.isEditing = false;
      return STAGE.draw();
    };

    return ScalableImage;

  })();

}).call(this);
